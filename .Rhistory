library(calcvar)
install.packages("roxygen2")
library(calcvar)
library(calcvar)
prompt(calc_var_groups)
prompt(calc_var_total)
prompt(compare_variances)
library(calcvar)
?calc_var_groups
library(calcvar)
library(limma)
library(affy)
library(hgu133plus2.db)
# Setwd
setwd("~/Documentos/silvia_vitor/Ensaios/Linhagem 10 - Jovem/Tempo 2")
# Ler e transformar os arquivos .CEL em objetos AffyBatch
raw <- ReadAffy()
# Setwd
setwd("~/Área de Trabalho/Lucas/Linhagem 10 - Jovem/Tempo 2")
# Setwd
setwd("~/Área de Trabalho/Lucas/Tempo 2/")
# Ler e transformar os arquivos .CEL em objetos AffyBatch
raw <- ReadAffy()
# Importar os dados das amostras
samples <- read.table("samples.txt", sep = "\t",stringsAsFactors = F, header = F, col.names = c('GSMid', "names"))
sampleNames(raw) <- samples$GSMid
# Obter os valores de expressao
eset <- rma(raw)
my_exp <- exprs(eset)
x <- hgu133plus2ENTREZID
entrez <- unlist(as.list(x[rownames(my_exp)]))
x <- hgu133plus2SYMBOL
symbol <- unlist(as.list(x[rownames(my_exp)]))
# Estabelecer os grupos
targets <- as.factor(c(rep('control', 3), rep('Ti100', 3), rep('Ti50', 3)))
# Criar a matriz design
design <- model.matrix(~ 0 + targets)
# Criar a matriz design
design <- model.matrix(~ 0 + targets)
colnames(design) <- c('control', 'Ti100', 'Ti50')
# Modelo linear
fit <- lmFit(my_exp, design)
# Criar listas com os ids correspondentes as probes
fit$genes$entrez <- entrez
fit$genes$symbol <- symbol
# Estabelecer os contrastes
# Neste momento, estabelecer as comparacoes entre os grupos
# a fim de obter os valores de expressao diferencial
contrasts <- makeContrasts("control-Ti100", "control-Ti50", levels=design)
# Estatistica bayesiana
ct.fit <- eBayes(contrasts.fit(fit, contrasts))
res.fit <- decideTests(ct.fit, method = "global", adjust.method = "BH", p.value = 0.001)
# Estatistica bayesiana
ct.fit <- eBayes(contrasts.fit(fit, contrasts))
res.fit <- decideTests(ct.fit, method = "global", adjust.method = "BH", p.value = 0.001)
# Combinar os resultados do limma em um unico dataset
SH.limma <- data.frame( entrez = ct.fit$genes$entrez, symbol = ct.fit$genes$symbol,
logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
# Seleção dos genes diferencialmente expressos
features <- rowSums(res.fit != 0) > 0
features <- names(features)[features]
# Filtrar e obter a tabela dos genes diferencialmente expressos
DEexp <- my_exp[features, ]
DElimma <- SH.limma[rownames(DEexp), ]
DElimma <- DElimma[complete.cases(DElimma), ]
library(genefilter)
# Modelo linear
my_exp <- varFilter(my_exp)
View(my_exp)
fit <- lmFit(my_exp, design)
# Criar listas com os ids correspondentes as probes
fit$genes$entrez <- entrez
fit$genes$symbol <- symbol
# Estabelecer os contrastes
# Neste momento, estabelecer as comparacoes entre os grupos
# a fim de obter os valores de expressao diferencial
contrasts <- makeContrasts("control-Ti100", "control-Ti50", levels = design)
# Estatistica bayesiana
ct.fit <- eBayes(contrasts.fit(fit, contrasts))
res.fit <- decideTests(ct.fit, method = "global", adjust.method = "BH", p.value = 0.001)
# Combinar os resultados do limma em um unico dataset
SH.limma <- data.frame( entrez = ct.fit$genes$entrez, symbol = ct.fit$genes$symbol,
logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
View(my_exp)
my_exp <- exprs(eset)
# O mapeamento tambem pode ser feito pelo db da plataforma:
my_exp <- varFilter(my_exp)
x <- hgu133plus2ENTREZID
entrez <- unlist(as.list(x[rownames(my_exp)]))
x <- hgu133plus2SYMBOL
symbol <- unlist(as.list(x[rownames(my_exp)]))
# Estabelecer os grupos
targets <- as.factor(c(rep('control', 3), rep('Ti100', 3), rep('Ti50', 3)))
# Criar a matriz design
design <- model.matrix(~ 0 + targets)
colnames(design) <- c('control', 'Ti100', 'Ti50')
# Modelo linear
fit <- lmFit(my_exp, design)
# Criar listas com os ids correspondentes as probes
fit$genes$entrez <- entrez
fit$genes$symbol <- symbol
# Estabelecer os contrastes
# Neste momento, estabelecer as comparacoes entre os grupos
# a fim de obter os valores de expressao diferencial
contrasts <- makeContrasts("control-Ti100", "control-Ti50", levels = design)
# Estatistica bayesiana
ct.fit <- eBayes(contrasts.fit(fit, contrasts))
res.fit <- decideTests(ct.fit, method = "global", adjust.method = "BH", p.value = 0.001)
# Combinar os resultados do limma em um unico dataset
SH.limma <- data.frame( entrez = ct.fit$genes$entrez, symbol = ct.fit$genes$symbol,
logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
# Seleção dos genes diferencialmente expressos
features <- rowSums(res.fit != 0) > 0
features <- names(features)[features]
# Filtrar e obter a tabela dos genes diferencialmente expressos
DEexp <- my_exp[features, ]
DElimma <- SH.limma[rownames(DEexp), ]
DElimma <- DElimma[complete.cases(DElimma), ]
features
# Filtrar e obter a tabela dos genes diferencialmente expressos
DEexp <- my_exp[features, ]
View(DEexp)
View(SH.limma)
?varFilter
my_exp <- exprs(eset)
# O mapeamento tambem pode ser feito pelo db da plataforma:
eset <- varFilter(eset)
my_exp <- exprs(eset)
View(my_exp)
# O mapeamento tambem pode ser feito pelo db da plataforma:
eset <- varFilter(eset, var.cutoff = 0.9)
my_exp <- exprs(eset)
# Obter os valores de expressao
eset <- rma(raw)
# O mapeamento tambem pode ser feito pelo db da plataforma:
my_exp <- varFilter(my_exp, var.cutoff = 0.9)
x <- hgu133plus2ENTREZID
entrez <- unlist(as.list(x[rownames(my_exp)]))
x <- hgu133plus2SYMBOL
symbol <- unlist(as.list(x[rownames(my_exp)]))
# Estabelecer os grupos
targets <- as.factor(c(rep('control', 3), rep('Ti100', 3), rep('Ti50', 3)))
# Criar a matriz design
design <- model.matrix(~ 0 + targets)
colnames(design) <- c('control', 'Ti100', 'Ti50')
# Modelo linear
fit <- lmFit(my_exp, design)
# Criar listas com os ids correspondentes as probes
fit$genes$entrez <- entrez
fit$genes$symbol <- symbol
# Estabelecer os contrastes
# Neste momento, estabelecer as comparacoes entre os grupos
# a fim de obter os valores de expressao diferencial
contrasts <- makeContrasts("control-Ti100", "control-Ti50", levels = design)
# Estatistica bayesiana
ct.fit <- eBayes(contrasts.fit(fit, contrasts))
res.fit <- decideTests(ct.fit, method = "global", adjust.method = "BH", p.value = 0.001)
# Combinar os resultados do limma em um unico dataset
SH.limma <- data.frame( entrez = ct.fit$genes$entrez, symbol = ct.fit$genes$symbol,
logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
# Seleção dos genes diferencialmente expressos
features <- rowSums(res.fit != 0) > 0
features <- names(features)[features]
# Filtrar e obter a tabela dos genes diferencialmente expressos
DEexp <- my_exp[features, ]
DElimma <- SH.limma[rownames(DEexp), ]
DElimma <- DElimma[complete.cases(DElimma), ]
# O mapeamento tambem pode ser feito pelo db da plataforma:
my_exp <- varFilter(my_exp, var.cutoff = 0.9)
x <- hgu133plus2ENTREZID
entrez <- unlist(as.list(x[rownames(my_exp)]))
x <- hgu133plus2SYMBOL
symbol <- unlist(as.list(x[rownames(my_exp)]))
# Estabelecer os grupos
targets <- as.factor(c(rep('control', 3), rep('Ti100', 3), rep('Ti50', 3)))
# Criar a matriz design
design <- model.matrix(~ 0 + targets)
colnames(design) <- c('control', 'Ti100', 'Ti50')
# Modelo linear
fit <- lmFit(my_exp, design)
# Criar listas com os ids correspondentes as probes
fit$genes$entrez <- entrez
fit$genes$symbol <- symbol
# Estabelecer os contrastes
# Neste momento, estabelecer as comparacoes entre os grupos
# a fim de obter os valores de expressao diferencial
contrasts <- makeContrasts("control-Ti100", "control-Ti50", levels = design)
# Estatistica bayesiana
ct.fit <- eBayes(contrasts.fit(fit, contrasts))
res.fit <- decideTests(ct.fit, method = "global", adjust.method = "BH", p.value = 0.001)
# Combinar os resultados do limma em um unico dataset
SH.limma <- data.frame( entrez = ct.fit$genes$entrez, symbol = ct.fit$genes$symbol,
logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
View(SH.limma)
View(my_exp)
# O mapeamento tambem pode ser feito pelo db da plataforma:
my_exp <- varFilter(my_exp, var.cutoff = 0.05)
my_exp <- exprs(eset)
# Estabelecer os grupos
targets <- as.factor(c(rep('control', 3), rep('Ti100', 3), rep('Ti50', 3)))
library(calcvar)
var_groups <- calc_var_groups(my_exp, groups = targets)
View(var_groups)
var_total <- calc_var_total(my_exp)
compare_variances(var_groups = var_groups, var_total = var_total)
library(calcvar)
library(calcvar)
